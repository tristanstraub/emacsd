* Environment
** Debugging

#+begin_src emacs-lisp
  (setq debug-on-error nil)
#+end_src

** Packages
#+begin_src emacs-lisp
  (defun ensure-package (package)
    (when (not (package-installed-p package))
        (el-get 'sync package)
        (require package nil t)))

  (setq el-get-sources '(
                         (:name replace-colorthemes
                                :description "Replacement color themes."
                                :type github
                                :pkgname "emacs-jp/replace-colorthemes")
                         ))

  (setq el-get-verbose t)
#+end_src

** Paths

#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "src" "~/.emacs.d"))
  ;;(add-to-list 'custom-theme-load-path (expand-file-name "src/replace-colorthemes" "~/.emacs.d"))

#+end_src

** Files
*** Revert all files

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

*** Lock files

#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
  (setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** Server

#+BEGIN_SRC emacs-lisp
  (load "server")
  (unless (server-running-p)
    (server-start))
#+END_SRC

** Text
#+begin_src emacs-lisp
  (setq tab-width 2)
#+end_src

* Look and feel
** Theme

#+begin_src emacs-lisp


  (ensure-package 'alect-themes)
  (ensure-package 'spacemacs-theme)
  (ensure-package 'replace-colorthemes)

  (load-theme 'alect-black-alt)


#+end_src

** Line numbers
#+begin_src emacs-lisp
  (global-linum-mode 1)
#+end_src

** Whitespace

#+begin_src emacs-lisp
  ;;(setq whitespace-style (quote (spaces tabs newline space-mark tab-mark newline-mark)))
  (setq whitespace-style (quote (tabs)))
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (global-whitespace-mode 1)
#+end_src

** GUI

#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
#+end_src

** Yes or No

Make yes or no a single key thing, instead of having to type "yes(return)".

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** COMMENT Scrolling

#+begin_src emacs-lisp
  (ensure-package 'smooth-scrolling)

  (setq smooth-scroll-margin 5)
  (setq scroll-step            1
          scroll-conservatively  10000)
#+end_src

* Editing tools
** Yas/Snippet

#+BEGIN_SRC emacs-lisp
  (ensure-package 'yasnippet)

  (yas/global-mode 1)
#+END_SRC

#+begin_src emacs-lisp
  ;; Taken from starter-kit.org to fix org-mode/yas incompatibility
  (defun yas/org-very-safe-expand ()
    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

  (defun yas/org-setup ()
    ;; yasnippet (using the new org-cycle hooks)
    (make-variable-buffer-local 'yas/trigger-key)
    (setq yas/trigger-key [tab])
    (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
    (define-key yas/keymap [tab] 'yas/next-field)
    ;; Run this as the last command, to prevent the popup of multiple possible "src" expansions
    (yas/initialize))

  (add-hook 'org-mode-hook #'yas/org-setup)
#+end_src

** Expand region

#+begin_src emacs-lisp
  (ensure-package 'expand-region)
#+end_src

** Undo tree
#+begin_src emacs-lisp
  (ensure-package 'undo-tree)
  (global-undo-tree-mode)
#+end_src

** Ace-jump

#+begin_src emacs-lisp
  (ensure-package 'ace-jump-mode)
#+end_src

* Searching
** Project root

#+begin_src emacs-lisp
  (ensure-package 'project-root)
  (setq project-roots
        '(
          ("Generic Git Project" :root-contains-files (".git"))))

  (defun ts/project-root ()
    (with-project-root
      (cdr project-details)))

  (defun ts/grep-project (term)
    (interactive
     (list (if (use-region-p)
               (buffer-substring (region-beginning) (region-end))
               (read-string "grep: "))))
    (grep (concat "grep -nH -iR --exclude='*.old' --exclude='*.json' --exclude='TAGS' --exclude-dir='builtAssets' --exclude-dir='lcov-report' --exclude-dir='build' --exclude-dir='node_modules' --exclude-dir='coverage' --exclude='*.css' --exclude='*.js' --exclude='.#*' -e \""
  ;;                term  "\" " (ts/project-root) "*" " | cut -c 1-160"
                  term  "\" " (ts/project-root) "*"
                  )))
#+end_src

** Ido-menu

#+begin_src emacs-lisp
  (ensure-package 'idomenu)
  (ido-mode 1)
  (setq ido-enable-flex-matching t)
  (setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))

  (defun ts/ido-forward ()
    (interactive)
    (ido-next-match))

  (defun ts/ido-backwards ()
    (interactive)
    (ido-prev-match))

  (defun ts/ido-define-keys () ;; C-n/p is more intuitive in vertical layout
    (define-key ido-completion-map (kbd "C-n") 'ts/ido-forward)
    (define-key ido-completion-map (kbd "C-p") 'ts/ido-backwards))
  (add-hook 'ido-setup-hook 'ts/ido-define-keys)

  (defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
#+end_src

** helm

#+begin_src emacs-lisp
    (ensure-package 'helm)
    (ensure-package 'helm-cmd-t)
    (ensure-package 'helm-ls-git)
    (ensure-package 'helm-git-grep)
    (require 'helm-config)

    (defvar ts/helm-cmd-t nil)


    (defcustom ts/helm-sources '(
                                 ts/helm-cmd-t
                                 helm-source-buffers-list
                                 helm-source-ls-git
                                 ;;helm-source-git-grep
                                 ;;helm-source-ido-virtual-buffers
                                 )

      "Your preferred sources to navigate"
      :type '(repeat (choice symbol))
      :group 'helm-files)

    (defun ts/helm-cmd-t ()
      "Preconfigured `helm' for opening direct-web files."
      (interactive)
      (setq ts/helm-cmd-t (helm-cmd-t-get-create-source (helm-cmd-t-root-data)))
      (let ((helm-ff-transformer-show-only-basename nil))
        (helm-other-buffer ts/helm-sources "*helm*")))

#+end_src

** neotree

#+begin_src emacs-lisp
  (ensure-package 'neotree)

  (defun neotree-of-current-project ()
    (interactive)
    (let ((file (buffer-file-name))
          (root (ts/project-root)))
      (neotree-dir root)
      (neotree-find file)))
#+end_src

* Development
** Magit

#+begin_src emacs-lisp
  (ensure-package 'magit)
#+end_src

** Erlang
#+begin_src emacs-lisp
  (ensure-package 'edts)
#+end_src

** Paredit

#+begin_src emacs-lisp
  (ensure-package 'paredit)
#+end_src

** Coffee script

#+begin_src emacs-lisp
  (ensure-package 'coffee-mode)
  (require 'coffee-mode)

  (defun coffee-custom ()
      "coffee-mode-hook"
      ;;(local-set-key (kbd "C-c C-r") 'coffee-compile-region)
      (local-set-key (kbd "<backtab>") 'coffee-indent-shift-left)
      (local-set-key (kbd "C-c C-c") 'coffee-compile-buffer-or-region)
       (set (make-local-variable 'tab-width) 2)
       (set (make-local-variable 'indent-tabs-mode) t))

  (add-hook 'coffee-mode-hook
            '(lambda() (coffee-custom)))

  (custom-set-variables '(coffee-tab-width 2))

  (defun run-shell-command-in-dir (dir command)
      (message (concat "DIR:" dir " COMMAND: " command))
      (let ((default-directory dir))
        (async-shell-command command)))

  (defun coffee-on-file ()
    (interactive)
    (run-shell-command-in-dir (file-name-directory (buffer-file-name)) (concat "coffee " (shell-quote-argument buffer-file-name))))
#+end_src

** org-babel
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)

  (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((R . t)
       (emacs-lisp . t)
       (ditaa . t)
       (ruby . t)
       (sh . t)
       (perl . t)
       (python . t)
       (plantuml . t)
       (js . t)
       (sql . t)))

  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

  (setq org-plantuml-jar-path (expand-file-name "~/vendor/plantuml/plantuml.jar"))
#+end_src

* Keys

** Global bindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "M-t") 'ts/helm-cmd-t)
  (global-set-key (kbd "C-c C-y") 'ts/grep-project)
  (global-set-key (kbd "C-c r") 'revert-buffer)
  (global-set-key (kbd "M-`") 'neotree-of-current-project)
  (global-set-key (kbd "C-c C-f") 'neotree-find)
  (global-set-key (kbd "C-. f") 'ffap)
  (global-set-key (kbd "C-=") 'er/expand-region)
  (define-key global-map (kbd "C-0") 'ace-jump-mode)
  (global-set-key (kbd "M-1") 'coffee-on-file)
#+end_src

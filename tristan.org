* Startup packages
#+BEGIN_SRC emacs-lisp
  (ensure-package 'seq)
  (ensure-package 'swiper)
#+END_SRC

* Startup window
#+begin_src emacs-lisp
  (defun welcome-screen ()
    (switch-to-buffer "*Status*")
    (erase-buffer)
    (linum-mode 0)
    (animate-string "...READY..."
                    (/ (window-height) 2) (- (/ (window-width) 2) 12)))

  (defun loading-screen ()
    (switch-to-buffer "*Status*")

    (erase-buffer)
    (linum-mode 0)
    (animate-string "...LOADING..."
                    (/ (window-height) 2) (- (/ (window-width) 2) 12)))

  (loading-screen)
#+end_src

* Environment
** Debugging

#+begin_src emacs-lisp
  (setq debug-on-error nil)
#+end_src

** Packages
#+begin_src emacs-lisp

  (ensure-package 'hydra)
#+end_src

** Paths

#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "src" "~/.emacs.d"))
  ;;(add-to-list 'custom-theme-load-path (expand-file-name "src/replace-colorthemes" "~/.emacs.d"))

#+end_src

** Files
*** Revert all files

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

*** Lock files

#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
  (setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC
** Backups
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
#+end_src

** Server

#+BEGIN_SRC emacs-lisp
  (load "server")
  (unless (server-running-p)
    (server-start))
#+END_SRC

** Backups
#+begin_src emacs-lisp
  (defvar dotfiles-dir nil)
  (setq dotfiles-dir (expand-file-name "./" "~/"))

  ;; Don't clutter up directories with files~
  (setq backup-directory-alist `(("." . ,(expand-file-name
                                      (concat dotfiles-dir "backups")))))

  ;; Don't clutter with #files either
  (setq auto-save-file-name-transforms
        `((".*" ,(expand-file-name (concat dotfiles-dir "backups")))))
#+end_src

** Text

#+begin_src emacs-lisp
  (setq tab-width 2)
  (setq-default indent-tabs-mode nil)
#+end_src

** Audio

#+begin_src emacs-lisp
  (defun raise-volume ()
    (interactive)
    (shell-command "amixer set Master 2+"))

  (defun lower-volume ()
    (interactive)
    (shell-command "amixer set Master 2-"))
#+end_src

** Workgroups
#+begin_src emacs-lisp
  (ensure-package 'workgroups)
  (setq wg-prefix-key (kbd "C-c w"))
  (workgroups-mode 1)
  (wg-load (expand-file-name "workgroups" "~/.emacs.d"))
#+end_src

** Ace-window for quick window switching
#+begin_src emacs-lisp
  (ensure-package 'ace-window)
#+end_src

** show matching parenthesis
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src
** COMMENT [guide key] Describes key bindings
#+begin_src emacs-lisp
  ;; (ensure-package 'guide-key)
  ;; (setq guide-key/guide-key-sequence '("C-x" "C-c w" "C-c C-m"))
  ;; ;; not working with ecb
  ;; (guide-key-mode nil)
  ;; (setq guide-key/recursive-key-sequence-flag t)
  ;; (setq guide-key/popup-window-position 'bottom)
#+end_src

** multiple cursors
#+begin_src emacs-lisp
  (ensure-package 'multiple-cursors)
#+end_src

** delsel
#+begin_src emacs-lisp
  (ensure-package 'delsel)
#+end_src

** wgrep
#+begin_src emacs-lisp
(ensure-package 'wgrep)
#+end_src

** my-other-window
#+begin_src emacs-lisp
(require 'cl)
(defvar avoid-window-regexp "^.*eshell.*$")
(setq avoid-window-regexp (regexp-quote "*eshell*"))

(defun my-other-window ()
  "Similar to 'other-window, only try to avoid windows whose buffers match avoid-window-regexp"
  (interactive)
  (let* ((window-list (delq (selected-window) (window-list)))
         (filtered-window-list (remove-if
                                (lambda (w)
                                  (string-match-p avoid-window-regexp (buffer-name (window-buffer w))))
                                window-list)))
    (if filtered-window-list
        (select-window (car filtered-window-list))
      (and window-list
           (select-window (car window-list))))))

#+end_src

#+RESULTS:
: my-other-window


* Look and feel

** Theme

#+begin_src emacs-lisp


  (ensure-package 'alect-themes)
  (ensure-package 'spacemacs-theme)
  (ensure-package 'replace-colorthemes)

  ;;(load-theme 'alect-black-alt)
  (load-theme 'deeper-blue)


#+end_src

** Faces
#+begin_src emacs-lisp
;; face to prevent global-hl-line-mode interfering with iedit face
(defface highlight-iedit
  '((((class color) (min-colors 88) (background light))
     :background "darkseagreen2")
    (((class color) (min-colors 88) (background dark))
     :background "darkolivegreen")
    (((class color) (min-colors 16) (background light))
     :background "darkseagreen2")
    (((class color) (min-colors 16) (background dark))
     :background "darkolivegreen")
    (((class color) (min-colors 8))
     :background "green" :foreground "black")
    (t :inverse-video t))
  "Basic face for highlighting."
  :group 'basic-faces)
#+end_src

** Line numbers
#+begin_src emacs-lisp
  (global-linum-mode 1)
#+end_src

** Whitespace

#+begin_src emacs-lisp
  ;;(setq whitespace-style (quote (spaces tabs newline space-mark tab-mark newline-mark)))
  (setq whitespace-style (quote (tabs spaces)))
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (global-whitespace-mode 1)
#+end_src

** GUI

#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
#+end_src

** Yes or No

Make yes or no a single key thing, instead of having to type "yes(return)".

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Auto revert

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

** modeline
*** File path
#+begin_src emacs-lisp
  ;;(setq uniquify-buffer-name-style 'forward)
  ;;(require 'uniquify)

(defun add-mode-line-dirtrack ()
    "When editing a file, show the last 2 directories of the current path in the mode line."
    (add-to-list 'mode-line-buffer-identification
                 '(:eval (substring default-directory
                                    (+ 1 (string-match "/[^/]+/[^/]+/$" default-directory)) nil))))
  (add-hook 'find-file-hook 'add-mode-line-dirtrack)
#+end_src

*** svg-modeline
#+begin_src emacs-lisp
  (ensure-package 'svg-mode-line-themes)
  ;; Looks good, but doesnt show me what I need, yet
  ;;(load-file (expand-file-name "site-lisp/ocodo-svg-mode-line.el" init-dir))
#+end_src


** COMMENT Scrolling

#+begin_src emacs-lisp
  (ensure-package 'smooth-scrolling)

  (setq smooth-scroll-margin 5)
  (setq scroll-step            1
          scroll-conservatively  10000)
#+end_src

** neotree width
#+begin_src emacs-lisp
  (setq neo-window-width 25)

#+end_src

** hlline -- Highlight current cursor row
#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src

* Editing tools
** Yas/Snippet

#+BEGIN_SRC emacs-lisp
  (ensure-package 'yasnippet)

  (yas/global-mode 1)
#+END_SRC

#+begin_src emacs-lisp
  ;; Taken from starter-kit.org to fix org-mode/yas incompatibility
  (defun yas/org-very-safe-expand ()
    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

  (defun yas/org-setup ()
    ;; yasnippet (using the new org-cycle hooks)
    (make-variable-buffer-local 'yas/trigger-key)
    (setq yas/trigger-key [tab])
    (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
    (define-key yas/keymap [tab] 'yas/next-field)
    ;; Run this as the last command, to prevent the popup of multiple possible "src" expansions
    (yas/initialize))

          (add-hook 'org-mode-hook
                    (lambda ()
                      (org-set-local 'yas/trigger-key [tab])
                      (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
;;  (add-hook 'org-mode-hook #'yas/org-setup)
#+end_src

** Expand region

#+begin_src emacs-lisp
  (ensure-package 'expand-region)
#+end_src

** Undo tree
#+begin_src emacs-lisp
  (ensure-package 'undo-tree)
  (global-undo-tree-mode)
#+end_src

** Ace-jump

#+begin_src emacs-lisp
  (ensure-package 'ace-jump-mode)
#+end_src

** Key chords

#+begin_src emacs-lisp
  (ensure-package 'key-chord)
  (key-chord-mode 1)

  (fset 'backtab
     (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([21 45 50 24 tab] 0 "%d")) arg)))

  (fset 'forwardtab
     (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([21 50 24 tab] 0 "%d")) arg)))
#+end_src

** IEdit

#+begin_src emacs-lisp
  (ensure-package 'iedit)
#+end_src

** Selective display

#+begin_src emacs-lisp
  (defvar ts/selective-display-level 0)
  (defvar ts/selective-display-level-step 2)
  (defvar ts/max-selective-display-level 6)

  (make-local-variable 'ts/selective-display-level)

  (defun ts/next-selective-display-level ()
    (if (>= ts/selective-display-level ts/max-selective-display-level)
       (setq ts/selective-display-level 0)
       (incf ts/selective-display-level ts/selective-display-level-step))

    (if (> ts/selective-display-level 0)
        ts/selective-display-level))


  (defun ts/toggle-selective-display ()
    (interactive)
    (set-selective-display (ts/next-selective-display-level)))

  (defun ts/reset-selective-display ()
    (interactive)
    (setq ts/selective-display-level ts/max-selective-display-level)
    (set-selective-display (ts/next-selective-display-level)))

  (global-set-key (kbd "C-`") 'ts/toggle-selective-display)
  (global-set-key (kbd "C-1") 'ts/reset-selective-display)

#+end_src

** FOlding
#+begin_src emacs-lisp
  (ensure-package 'yafolding)
#+end_src

** wgrep
#+begin_src emacs-lisp
  (ensure-package 'wgrep)
#+end_src

* Searching
** Bookmarks+
#+begin_src emacs-lisp
  (ensure-package 'bookmark+)
  (setq bookmark-save-flag 1)
#+end_src

** Project root

#+begin_src emacs-lisp
  (ensure-package 'project-root)
  (setq project-roots
        '(
          ("Generic Git Project" :root-contains-files (".git"))))

  (defun ts/project-root ()
    (with-project-root
      (cdr project-details)))

  (defun ts/grep-project (term)
    (interactive
     (list (if (use-region-p)
               (buffer-substring (region-beginning) (region-end))
               (read-string "grep: "))))
    (grep (concat "grep -nH -iR --exclude='*.old' --exclude='*.edn' --exclude-dir='target' --exclude='*.log' --exclude='*.map' --exclude='*.json' --exclude='TAGS' --exclude-dir='builtAssets' --exclude-dir='lcov-report' --exclude-dir='build' --exclude-dir='node_modules' --exclude-dir='coverage' --exclude='*.css' --exclude='*.js' --exclude='.#*' -e \""
  ;;                term  "\" " (ts/project-root) "*" " | cut -c 1-160"
                  term  "\" " (ts/project-root) "*"
                  )))
#+end_src

** COMMENT Ido-menu

#+begin_src emacs-lisp
    (ensure-package 'spinner)

    (ensure-package 'ido)
    ;;(ensure-package 'idomenu)
    (ensure-package 'flx)
    (ensure-package 'ido-ubiquitous)

    (flx-ido-mode 1)

    (ensure-package 'ido-vertical-mode)
    (ido-vertical-mode)

    (ido-mode 1)
    (setq ido-enable-flex-matching t)
    (setq ido-use-faces nil)

    (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-case-fold nil
        ido-auto-merge-work-directories-length -1
        ido-create-new-buffer 'always
        ido-use-filename-at-point nil
        ido-max-prospects 10)

    (setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))

    ;; Ido at point (C-,)
    (ensure-package 'ido-at-point)
    (ido-at-point-mode)

    ;; This gives me clj-refactor add dependency minibuffer narrowing - awesome!
    (ido-ubiquitous-mode 1)

    (defun ts/ido-forward ()
      (interactive)
      (ido-next-match))

    (defun ts/ido-backwards ()
      (interactive)
      (ido-prev-match))


    (defun ts/ido-define-keys () ;; C-n/p is more intuitive in vertical layout
      (define-key ido-completion-map (kbd "C-n") 'ts/ido-forward)
      (define-key ido-completion-map (kbd "C-p") 'ts/ido-backwards))
    (add-hook 'ido-setup-hook 'ts/ido-define-keys)

    (defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
    (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)

  ;; not sure i need this. am trying to figure out how clj-refactor can auto expand requires
  ;; ;; Fix ido-ubiquitous for newer packages
  ;; (defmacro ido-ubiquitous-use-new-completing-read (cmd package)
  ;;   `(eval-after-load ,package
  ;;      '(defadvice ,cmd (around ido-ubiquitous-new activate)
  ;;         (let ((ido-ubiquitous-enable-compatibility nil))
  ;;           ad-do-it))))

  ;; (ido-ubiquitous-use-new-completing-read webjump 'webjump)
  ;; (ido-ubiquitous-use-new-completing-read yas/expand 'yasnippet)
  ;; (ido-ubiquitous-use-new-completing-read yas/visit-snippet-file 'yasnippet)


#+end_src

** ivy/swiper

#+begin_src emacs-lisp
(ensure-package 'swiper)
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)

(defun ivy-dired ()
  (interactive)
  (if ivy--directory
      (ivy-quit-and-run
       (dired ivy--directory)
       (when (re-search-forward
              (regexp-quote
               (substring ivy--current 0 -1)) nil t)
         (goto-char (match-beginning 0))))
    (user-error
     "Not completing files currently")))
#+end_src

** helm

#+begin_src emacs-lisp
    (ensure-package 'helm)
    (ensure-package 'helm-cmd-t)
    (ensure-package 'helm-ls-git)
    (ensure-package 'helm-git-grep)
    (require 'helm-config)

    (defvar ts/helm-cmd-t nil)


    (defcustom ts/helm-sources '(helm-source-ls-git
                                 ts/helm-cmd-t
                                 helm-source-buffers-list

                                 ;;helm-source-git-grep
                                 ;;helm-source-ido-virtual-buffers
                                 )

      "Your preferred sources to navigate"
      :type '(repeat (choice symbol))
      :group 'helm-files)

    (defun ts/helm-cmd-t ()
      "Preconfigured `helm' for opening direct-web files."
      (interactive)
      (setq ts/helm-cmd-t (helm-cmd-t-get-create-source (helm-cmd-t-root-data)))
      (let ((helm-ff-transformer-show-only-basename nil))
        (helm-other-buffer ts/helm-sources "*helm*")))

#+end_src

** neotree

#+begin_src emacs-lisp
  (ensure-package 'neotree)

  (defun neotree-of-current-project ()
    (interactive)
    (let ((file (buffer-file-name))
          (root (ts/project-root)))
      (neotree-dir root)
      (neotree-find file)))
#+end_src

* Development
** Magit

#+begin_src emacs-lisp
  (ensure-package 'magit)
#+end_src

** Paredit

#+begin_src emacs-lisp
  (ensure-package 'paredit)
#+end_src

** Erlang
#+begin_src emacs-lisp
  (ensure-package 'edts)
#+end_src

** Coffee script

#+begin_src emacs-lisp
  (ensure-package 'coffee-mode)
  (require 'coffee-mode)

  (defun coffee-custom ()
    "coffee-mode-hook"
    ;;(local-set-key (kbd "C-c C-r") 'coffee-compile-region)
    (local-set-key (kbd "<backtab>") 'coffee-indent-shift-left)
    (local-set-key (kbd "C-c C-c") 'coffee-compile-buffer-or-region)
    (set (make-local-variable 'tab-width) 2)
    (set (make-local-variable 'indent-tabs-mode) nil)
    (yafolding-mode))

  (add-hook 'coffee-mode-hook
            '(lambda() (coffee-custom)))

  (custom-set-variables '(coffee-tab-width 2))

  (defun run-shell-command-in-dir (dir command)
    (message (concat "DIR:" dir " COMMAND: " command))
    (let ((default-directory dir))
      (async-shell-command command)))

  (defun coffee-on-file ()
    (interactive)
    (run-shell-command-in-dir (file-name-directory (buffer-file-name))
                              (concat "NODE_ENV=development coffee --nodejs --harmony-proxies " (shell-quote-argument buffer-file-name))))

  (defun coffee-compile-buffer-or-region ()
    (interactive)
    (if (use-region-p)
        (coffee-compile-region (region-beginning) (region-end))
      (coffee-compile-buffer)))
#+end_src

#+BEGIN_SRC emacs-lisp
  (defun run-jshint-coffee()
    "Runs all the tests in the current buffer"
    (interactive)
    (let* (command exit-value (buf-name (buffer-file-name))
                   (temp-file (concat buf-name ".js"))
                   (temp-jshint-file (concat temp-file ".hint")))


      (setq command (concat "coffee -p -b -c \"" buf-name "\" > " temp-file))
      (setq exit-value (shell-command command))

      (setq command (concat "jshint --verbose --config /home/tristan/.jshintrc \"" temp-file "\" > " temp-jshint-file))
      (setq exit-value (shell-command command))

      (let ((buffer (create-file-buffer temp-jshint-file)))
        (with-current-buffer buffer
          (erase-buffer)
          (insert-file-contents temp-jshint-file)
          (delete-file temp-file)
          (delete-file temp-jshint-file))

        (display-buffer buffer))))
#+END_SRC

#+begin_src emacs-lisp
  (ensure-package 'flymake-coffee)
  (add-hook 'coffee-mode-hook 'flymake-coffee-load)
  (setq flymake-coffee-coffeelint-configuration-file
    "/home/tristan/.cslint-config.json")
  (ensure-package 'flymake-cursor)
#+end_src

** Ruby
#+begin_src emacs-lisp
  (ensure-package 'inf-ruby)
#+end_src

** Gherkin

#+begin_src emacs-lisp
  (ensure-package 'cucumber)
#+end_src

** js-lookup
#+begin_src emacs-lisp
  (ensure-package 'js-lookup)
#+end_src

** javascript
#+begin_src emacs-lisp
  (ensure-package 'js2-mode)
#+end_src

** json
#+begin_src emacs-lisp
  (ensure-package 'json-reformat)
#+end_src

** clojure
#+begin_src emacs-lisp
  (ensure-package 'inflections)
  (ensure-package 'clj-refactor)
  (load-file (expand-file-name "site-lisp/clj-autotest.el" init-dir))
  (require 'clj-autotest)

    (global-set-key (kbd "M-r") 'move-to-window-line-top-bottom)


#+end_src

** ecb
#+BEGIN_SRC emacs-lisp
(ensure-package 'ecb)
#+END_SRC

* Gnus
#+begin_src emacs-lisp
(setq gnus-select-method '(nntp "news.gmane.org"))
#+end_src

* Agenda

#+begin_src emacs-lisp
  (setq org-agenda-files (list "~/SpiderOak Hive/me/tasks.org" "~/SpiderOak Hive/me/journal.org"))
#+end_src

** Jade

#+begin_src emacs-lisp
  (ensure-package 'jade-mode)
#+end_src

** org-babel
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)

  ;; Get syntax highlighting within begin-src blocks
  (setq org-src-fontify-natively t)

  (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (emacs-lisp . t)
     (ditaa . t)
     (ruby . t)
     (sh . t)
     (perl . t)
     (python . t)
     (plantuml . t)
     (js . t)
     (sql . t)
     (clojure . t)))

  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

  (setq org-plantuml-jar-path (expand-file-name "~/vendor/plantuml/plantuml.jar"))
#+end_src

** Mocha test runner

#+begin_src emacs-lisp
  (require 'compile)

  (defun mocha-errors ()
    (interactive)

    (local-set-key (kbd "<tab>") 'next-error-no-select)
    (local-set-key (kbd "<backtab>") 'previous-error-no-select)

    (make-local-variable 'compilation-error-regexp-alist)

    (pushnew '("\\([_[:alnum:]-/]+[.]\\(coffee\\|js\\)\\):\\([[:digit:]]+\\):[[:digit:]]+"
       1 3) compilation-error-regexp-alist)

  )
  (defvar previous-test nil)
  (defun run-current-test (watchp)
      (let* ((root (ts/project-root))
             (filename (buffer-file-name))
             (relative-test-filename (file-relative-name filename root))
             (test-to-run relative-test-filename))

        (setq previous-test relative-test-filename)

        (run-shell-command-in-dir root (concat "TZ=utc SELENIUM_REATTACH=1 SELENIUM_HOST=localhost:4444 NODE_ENV=test " root "node_modules/.bin/mocha --bail --harmony_proxies "
                                               (if watchp " -w " "")
                                               test-to-run

                                               ))

        (with-current-buffer "*Async Shell Command*"
            ;;(compilation-mode)
            ;;(other-window 1)
            ;;(beginning-of-buffer)
            )))

  (defun run-mocha (arg)
      (interactive "P")

      (run-current-test (equal arg '(4) )))

  (add-hook 'compilation-mode-hook 'mocha-errors)
#+end_src

** Clojure
*** Cider

#+begin_src emacs-lisp
  (setq org-babel-clojure-backend 'cider)
  (ensure-package 'cider)

  (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
#+end_src

*** Paredit in clojure-mode

#+begin_src emacs-lisp
  (defun clojure-mode-settings ()
   (paredit-mode 1)
   (cider-mode 1)
   (show-paren-mode))

  (add-hook 'clojure-mode-hook 'clojure-mode-settings)
#+end_src
* RSS
#+begin_src emacs-lisp
  (ensure-package 'elfeed)
#+end_src

* Browser
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url)
#+end_src

* Web

#+begin_src emacs-lisp

(defvar-local endless/display-images t)

(defun endless/toggle-image-display ()
  "Toggle images display on current buffer."
  (interactive)
  (setq endless/display-images
        (null endless/display-images))
  (endless/backup-display-property endless/display-images))

(defun endless/backup-display-property (invert &optional object)
  "Move the 'display property at POS to 'display-backup.
Only applies if display property is an image.
If INVERT is non-nil, move from 'display-backup to 'display
instead.
Optional OBJECT specifies the string or buffer. Nil means current
buffer."
  (let* ((inhibit-read-only t)
         (from (if invert 'display-backup 'display))
         (to (if invert 'display 'display-backup))
         (pos (point-min))
         left prop)
    (while (and pos (/= pos (point-max)))
      (if (get-text-property pos from object)
          (setq left pos)
        (setq left (next-single-property-change pos from object)))
      (if (or (null left) (= left (point-max)))
          (setq pos nil)
        (setq prop (get-text-property left from object))
        (setq pos (or (next-single-property-change left from object)
                      (point-max)))
        (when (eq (car prop) 'image)
          (add-text-properties left pos (list from nil to prop) object))))))
#+end_src

* Keys

#+begin_src emacs-lisp
  (ensure-package 'unbound)
#+end_src

** Swiper

#+begin_src emacs-lisp
(global-set-key "\C-s" 'swiper)
(global-set-key "\C-r" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(define-key ivy-minibuffer-map (kbd "C-d") 'ivy-dired)
;;(global-set-key [f6] 'ivy-resume)
#+end_src


** misc
#+begin_src emacs-lisp
    (global-set-key (kbd "C-x o") 'other-window)

    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "M-t") 'ts/helm-cmd-t)
    (global-set-key (kbd "C-c C-y") 'ts/grep-project)
    (global-set-key (kbd "C-c r") 'revert-buffer)
    (global-set-key (kbd "M-`") 'neotree-of-current-project)
    (global-set-key (kbd "C-c C-f") 'neotree-find)
    (global-set-key (kbd "C-. f") 'ffap)
    (global-set-key (kbd "C-=") 'er/expand-region)
    (define-key global-map (kbd "C-0") 'ace-jump-mode)
    (global-set-key (kbd "M-1") 'coffee-on-file)
    (global-set-key (kbd "C-c m") 'run-mocha)
    (key-chord-define-global "DF" 'backtab)

(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

    (defun setup-jshint-coffee ()
      (local-set-key (kbd "C-c j") 'run-jshint-coffee))

    (add-hook 'coffee-mode-hook 'setup-jshint-coffee)

    (defun setup-eww ()
      (local-set-key (kbd "C-c i") 'endless/toggle-image-display))

    (add-hook 'eww-mode-hook 'setup-eww)

    ;; (global-set-key (kbd "<XF86AudioRaiseVolume>") 'raise-volume)
    ;; (global-set-key (kbd "<XF86AudioLowerVolume>") 'lower-volume)
    (global-set-key (kbd "M-0") 'ace-window)

    (defvar yafolding-mode-map
      (let ((map (make-sparse-keymap)))
        (define-key map (kbd "<C-S-return>") #'yafolding-hide-parent-element)
        (define-key map (kbd "<C-M-return>") #'yafolding-toggle-all)
        (define-key map (kbd "<C-return>") #'yafolding-toggle-element)
        map))

  ;; TODO move non-key related stuff to Development
  (defun my-clojure-mode-hook ()
    (clj-refactor-mode 1)
    (yas-minor-mode 1) ; for adding require/use/import
    (cljr-add-keybindings-with-prefix "C-c C-m"))

  (add-hook 'clojure-mode-hook #'my-clojure-mode-hook)

  (global-set-key (kbd "C-,") 'completion-at-point)

#+end_src
* Desktop
#+begin_src emacs-lisp
  ;; commented out because workgroups may be a better option
  ;;(desktop-read)
  ;;(desktop-save-mode 1)
#+end_src
* Welcome

#+begin_src emacs-lisp
  ;; disabled to test wg-load
  (setq inhibit-splash-screen t)
  (message "Done!")
  ;;(welcome-screen)
#+end_src
